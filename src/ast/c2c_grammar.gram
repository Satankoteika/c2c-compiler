/*
    This grammar is for the c2c programming language. It is not written for any generator parser. 
    Use this grammar if you want to understand the syntax of the language and its constructions, as well as if you are writing a parser of this grammar.

    The implementation of the LALR parser is in parser/parser.cpp, this implementation is written without generator parsers.
    This grammar does not consider conditional compilation, and preprocessor directives.

    The AST of this grammar is located in the current directory, in the file ast.cpp; Each nonterminal is a node of the tree.

                                                                                                    Convention
    * S is the starting symbol
    * Definition of a nonterminal via ->
    * stmt_ prefix for the statements

                                                                                                    Rule Convention
    | - or
    ? - optional
    * - the marked expression can be repeated zero or more times
    Grouping with ()
*/

												Grammar


S -> (using_decl | stmt_var_decl | stmt_if | stmt_for | stmt_while | stmt_fn_decl | stmt_switch | stmt_enum_decl)*

primary_expression -> (identifier | number_literal | string_literal | '(' expression ')')

expression -> assign_expression (',' assign_expression)*

cast_expression -> '(' type_name ')' cast_expression

multiplicative_expression -> cast_expression (('*'|'/'|'%') cast_expression)*
additive_expression -> multiplicative_expression (('+'|'-') multiplicative_expression)*
shift_expression -> additive_expression (('<<'|'>>') additive_expression)*

relational_expression -> shift_expression (('<'|'>'|'<='|'>=') shift_expression)*

equality_expression -> relational_expression (('=='| '!=') relational_expression)*
and_expression -> equality_expression ( '&' equality_expression)*

exclusive_or_expression -> and_expression (^' and_expression)*
inclusive_or_expression -> exclusive_or_expression ('|' exclusive_or_expression)*

logical_and_expression -> inclusive_or_expression ('&&' inclusive_or_expression)*
logical_or_expression -> logical_and_expression ( '||' logical_and_expression)*

conditional_expression -> logical_or_expression ('?' expression ':' conditional_expression)?

assignment_expression -> conditional_expression | (unary_expression assignment_operator assignment_expression)
assignment_operator -> '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|='

postfix_expression -> primary_expression ('[' expression ']' | '(' argument_expression_list? ') | ('.' | '->') identifier | '++' | '--')
argument_expression_list -> assignment_expression (',' assignment_expression)*

unary_expression -> ('++' |  '--' |  'sizeof')? (postfix_expression | unary_operator cast_expression | 'sizeof' '(' type_name ')')
unary_operator -> '&' | '*' | '+' | '-' | '~' | '!'

stmt_var_decl -> storage_modifier? type_qualifier? type '*'? identifier ('=' primary_expression)? ';'

stmt_if -> 'if' '(' conditional_expression ')' block ('else' stmt_if | 'else' block)
stmt_while -> 'while' '(' conditional_expression ')' block

stmt_for -> 'for' '(' (for_decl)? ';' argument_expression_list? ';' argument_expression_list? ')' block?
for_decl -> type_qualifier? '*'? type identifier ('=' primary_expression)?

block -> '{' (stmt_var_decl | stmt_if | stmt_for | stmt_while | stmt_switch)* '}'

using_decl -> 'using' identifier '=' type_name ';'

type_qualifier -> ('const', 'volatile')
storage_modifier -> ('static' | 'extern')
type_name -> type_qualifier? '*'? type
type -> ('void', 'char' | 'bool' | 'short' | 'int' | 'long' | 'float' | 'double') 

number_literal -> TOKEN(token_type::l_number_literal)
string_literal -> TOKEN(token_type::l_string_literal)
identifier -> TOKEN(token_type::identifier)
